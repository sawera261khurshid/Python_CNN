# -*- coding: utf-8 -*-
"""conv22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uuoY_XGUezGeTm5O5cjPuK81cSl7Akns
"""

import numpy as np 
class Conv3x3_n_to_n_padding:
    def __init__(self, input_depth, output_depth, activation=None, padding=0):
        self.filters = np.random.randn(output_depth, input_depth, 3, 3) / 9
        self.padding = padding
        self.activation = activation

    def forward(self, input):
        self.input = input
        input = np.pad(input, ((0,0), (0,0), (self.padding, self.padding), (self.padding, self.padding)), mode='constant')
        output = np.zeros((input.shape[0], self.filters.shape[0], input.shape[2] - 2*self.padding, input.shape[3] - 2*self.padding))

        for i in range(output.shape[0]):
            for j in range(output.shape[1]):
                output[i,j] = (self.filters[j] * input[i,:,j:j+3, :][:, :, :, 0:output.shape[3]]) . sum(axis=(1,2))  
        
        if self.activation is not None:
            output = self.activation.forward(output)

        return output