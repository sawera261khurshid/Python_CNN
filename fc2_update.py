# -*- coding: utf-8 -*-
"""fc2_update.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aSkAXIqSgqev5V5mczmtxJ-DBaNe9TEO
"""

import numpy as np

class FC:
    # A standard fully-connected layer with softmax activation.

    def __init__(self, input_len, nodes, dtype=np.float32):
        # We divide by input_len to reduce the variance of our initial values
        self.weights = np.random.randn(input_len, nodes).astype(dtype) / input_len
        self.biases = np.zeros(nodes, dtype=dtype)

    def convert_weights_to_fp16(self):
        self.weights = self.weights.astype(np.float16)

    def convert_biases_to_fp16(self):
        self.biases = self.biases.astype(np.float16)

    def forward(self, input):
        self.last_input_shape = input.shape
        input = input.flatten().astype(self.weights.dtype)

        totals = np.dot(input, self.weights) + self.biases
        self.last_totals = totals

        return totals.astype(self.weights.dtype)

    def cast_predictions_to_fp32(self, predictions):
        predictions_fp32 = predictions.astype(np.float32)
        return predictions_fp32

    def calculate_loss(self, predictions_fp32, labels, scaling_factor):
        # Calculate loss using predictions_fp32 and labels
        # ...
        scaled_loss = loss * scaling_factor
        return scaled_loss

    def cast_loss_to_fp16(self, loss):
        loss_fp16 = loss.astype(np.float16)
        return loss_fp16

    def backprop(self, d_L_d_t, learn_rate):
        d_L_d_t = d_L_d_t.astype(self.weights.dtype)

        # Gradients of totals against weights/biases/input
        d_t_d_w = self.last_input
        d_t_d_b = 1
        d_t_d_inputs = self.weights

        # Gradients of loss against weights/biases/input
        d_L_d_w = np.outer(d_t_d_w, d_L_d_t)
        d_L_d_b = d_L_d_t * d_t_d_b
        d_L_d_inputs = np.dot(d_L_d_t, d_t_d_inputs.T).reshape(self.last_input_shape)

        # Update weights / biases
        self.weights -= learn_rate * d_L_d_w
        self.biases -= learn_rate * d_L_d_b

        return d_L_d_inputs